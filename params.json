{"body":"OWNER\r\n=====\r\n\r\nOWNER, a simple API to ease Java(TM) property files usage.\r\n\r\nINTRODUCTION\r\n------------\r\n\r\nThe inspiring idea for this API comes from how GWT handles i18n and resource loading.\r\nYou can read more about [GWT ClientBundle][1]\r\n\r\nThe problem in using GWT ClientBundle for loading property files is that it only works in client code (JavaScript), \r\nnot standard Java classes.\r\nAlso, GWT is a big library and it is designed for different purposes. \r\n\r\nSince I liked the approach I decided to implement this API.\r\n\r\n[1]: https://developers.google.com/web-toolkit/doc/latest/DevGuideClientBundle\r\n\r\nUSAGE\r\n-----\r\n\r\nThe approach used by OWNER APIs, is to define a Java interface associated to a Java properties file.\r\n\r\nSuppose your properties file is defined as ServerConfig.properties:\r\n\r\n    port=80\r\n    hostname=foobar.com\r\n    maxThreads=100\r\n    \r\nTo access this property you need to define a convenient Java interface in ServerConfig.java:\r\n\r\n    public interface ServerConfig extends Config {\r\n        int port();\r\n        String hostname();\r\n        int maxThreads();\r\n    }\r\n    \r\nThen, you can use it from inside your code:\r\n\r\n    public class MyApp {    \r\n        public static void main(String[] args) {\r\n            ServerConfig cfg = ConfigFactory.create(ServerConfig.class);\r\n            System.out.println(\"Server \" + cfg.hostname() + \":\" + cfg.port() + \" will run \" + cfg.maxThreads());\r\n        }\r\n    }\r\n\r\nThe mapping between the Java interface and the properties file can be automatically resolved by Owner API.\r\nBy default OWNER API tries to load the properties for the interface com.foo.bar.ServerConfig from the classpath as\r\ncom.foo.bar.ServerConfig.properties; then it tries to assoaciate every method of the interface to the property keys \r\ncontained in the properties file.\r\n\r\nThis default mapping can be tailored to your needs using some annotations on the interface. \r\n\r\nExample:\r\n\r\n    @Sources({ \"file:~/.myapp.config\", \"file:/etc/myapp.config\", \"classpath:foo/bar/baz.properties\" })\r\n    public interface ServerConfig extends Config {\r\n        \r\n        @Key(\"server.http.port\")\r\n        int port();\r\n        \r\n        @Key(\"server.host.name\")\r\n        String hostname();\r\n        \r\n        @Key(\"server.max.threads\");\r\n        @DefaultValue(\"42\")\r\n        int maxThreads();\r\n    }\r\n\r\nIn the above example, OWNER will try to load the properties from several `@Sources`:\r\n\r\n 1. first, it will try to load from user's home directory ~/.myapp.config\r\n 2. if the previous attempt fails, then it will try to load the properties from /etc/myapp.config\r\n 3. and, as last resort, it will try to load the properties from the classpath loding the resource identified by the path foo/bar/baz.properties\r\n\r\nIn the `@Sources` annotation you can also specify system properties and/or environment variables with the syntax \r\n`file:${user.home}/.myapp.config` (this gets resolved by 'user.home' System property) or `file:${HOME}/.myapp.config`  \r\n(this gets resolved by the$HOME environment variable). The `~` used in the previous example is another example of \r\nvariable expansion, and it is equivalent to `${user.home}`\r\n\r\nDid you notice that there is also the `@DefaultValue(\"42\")` annotation specified in the example?\r\nThis annotation gets automatically converted to `int`, since `maxThreads()` returns an `int`, and the value specified is \r\nused as default, if `server.max.threads` key is not specified in the property file.\r\n\r\nThe `@DefaultValue` is very confortable to use, and the basic type conversion between the `String` value and the method \r\nreturn type are done automatically.\r\n\r\n#### Undefined properties \r\n\r\nIf, in the example, ServerConfig interface cannot be mapped to any properties file, then all the methods in the interface \r\nwill return `null`.\r\n\r\nIf, in the example, we omit `@DefaultValue` for `maxThreads()` and we forget to define the property key in the properties \r\nfiles, `null` will be used as default value.\r\n\r\nJAVADOCS\r\n--------\r\n\r\nAPI javadocs can be found [here](http://lviggiano.github.com/owner/target/site/apidocs/index.html).\r\n\r\nBUILD\r\n-----\r\n\r\nOWNER uses maven to build. At the moment the jars are not available on any repository, so you need to use git and maven to \r\ncreate the library jar.\r\n\r\n    $ git clone git://github.com/lviggiano/owner.git\r\n    $ cd owner\r\n    $ mvn install\r\n\r\nThis will install OWNER jars in your local maven repository.\r\n\r\nAlso you can pick the jar files from the target directory created by maven `mvn install' command:\r\n\r\n * owner-1.0-SNAPSHOT-javadoc.jar\r\n * owner-1.0-SNAPSHOT-sources.jar\r\n * owner-1.0-SNAPSHOT.jar\r\n \r\n\r\nBINARIES\r\n--------\r\n\r\nYou can download pre-built binaries from following links:\r\n\r\n#### Archives\r\n\r\n * [owner-1.0-SNAPSHOT-bin.tar.bz2](http://lviggiano.github.com/owner/target/owner-1.0-SNAPSHOT-bin.tar.bz2)\r\n * [owner-1.0-SNAPSHOT-bin.tar.gz](http://lviggiano.github.com/owner/target/owner-1.0-SNAPSHOT-bin.tar.gz)\r\n * [owner-1.0-SNAPSHOT-bin.zip](http://lviggiano.github.com/owner/target/owner-1.0-SNAPSHOT-bin.zip)\r\n\r\n#### Jars\r\n\r\n * [owner-1.0-SNAPSHOT.jar](http://lviggiano.github.com/owner/target/owner-1.0-SNAPSHOT.jar)\r\n * [owner-1.0-SNAPSHOT-javadoc.jar](http://lviggiano.github.com/owner/target/owner-1.0-SNAPSHOT-javadoc.jar)\r\n * [owner-1.0-SNAPSHOT-sources.jar](http://lviggiano.github.com/owner/target/owner-1.0-SNAPSHOT-sources.jar)\r\n\r\nDEPENDENCIES\r\n------------\r\n\r\nOWNER depends from [commons-lang][2] to do some variable expansions.\r\n\r\n[2]: http://commons.apache.org/lang/\r\n\r\nTESTS\r\n-----\r\n\r\nOWNER codebase is very compact, and it is [fully covered][coverage-report] by unit tests.\r\n\r\nTo execute the tests, you need maven properly installed and configured, \r\nthen run the following command from the distribution root:\r\n\r\n    $ mvn test\r\n\r\n[coverage-report]: http://lviggiano.github.com/owner/target/site/cobertura/index.html\r\n\r\nFAQ\r\n---\r\n### What does \"OWNER\" name mean?\r\n\r\nSince this API is used to access *Properties* files, and we implement interfaces to deal with those, \r\nsomehow interfaces are *owners* for the properties. So here comes the name OWNER.\r\n\r\n### Is OWNER a stable API?\r\n\r\nThe codebase is very compact, and the test coverage is almost 100%. So there shouldn't be many bugs to deal with.\r\nYou have the source, you can help improving the library and fix the bugs if you find some.\r\n\r\nStill, OWNER is very early, and APIs may change in the\r\nfuture to add/change some behaviors. \r\nFor example I would like to specify an annotation to define additional properties load policies. \r\nBut the goal is to keep the API backward compatible.\r\n\r\nLICENSE\r\n-------\r\n\r\nOWNER is released under the BSD license. \r\n\r\nSee LICENSE file included for the details.\r\n\r\nMORE INFORMATION\r\n----------------\r\n\r\nRefer to the documentation on the [web site](http://lviggiano.github.com/owner) \r\nor [github wiki](https://github.com/lviggiano/owner/wiki) for further details on how to use the Owner API.\r\n\r\nIf you find some bug or have any request open an issue on [github issues](https://github.com/lviggiano/owner/issues).\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Owner","google":"","tagline":"owner"}